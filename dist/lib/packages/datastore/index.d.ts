import { FieldNameENJP } from '../../util/type';
import { HxbAbstract } from '../../../HxbAbstract';
import { GetFieldAutoNumberQuery } from '../../types/datastore';
import Project from '../project';
import Language from '../language';
import Field from '../field';
import Action from '../action';
import Status from '../status';
import Item from '../item';
import { GetItemsParameters, GetItemsPl } from '../../types/item';
type allArgs = {
    project: Project;
};
export default class Datastore extends HxbAbstract {
    id: string;
    name: FieldNameENJP | string;
    project: Project;
    language?: Language;
    templateName: string;
    _fields: Field[];
    displayId: string;
    extendLimitEextareaLength: number;
    ignoreSaveTemplate: boolean;
    showDisplayIdToList: boolean;
    showInMenu: boolean;
    showInfoToList: boolean;
    showOnlyDevMode: boolean;
    useBoardView: boolean;
    useCsvUpdate: boolean;
    useExternalSync: boolean;
    useGridView: boolean;
    useGridViewByDefault: boolean;
    useWrDownload: boolean;
    useReplaceUpload: boolean;
    useStatusUpdate: boolean;
    useStatusUpdateByDefault: boolean;
    displayOrder: number;
    externalServiceUrl: string;
    dataSource: string;
    deleted: boolean;
    externalServiceData: string;
    imported: boolean;
    invisible: boolean;
    isExternalService: boolean;
    noStatus: boolean;
    unread: boolean;
    uploading: boolean;
    useQrDownload: boolean;
    private _actions;
    constructor(params?: {
        [key: string]: any;
    });
    static all({ project }: allArgs): Promise<Datastore[]>;
    createItemId(): Promise<string>;
    set(key: string, value: any): Datastore;
    fetch(): Promise<boolean>;
    save(): Promise<boolean>;
    create(): Promise<boolean>;
    validateDisplayId(displayId: string): Promise<boolean>;
    update(): Promise<boolean>;
    fields(): Promise<Field[]>;
    field(id: string): Promise<Field>;
    fieldSync(id: string): Field;
    actions(): Promise<Action[]>;
    statuses(): Promise<Status[]>;
    action(operation: string): Promise<Action | undefined>;
    autoNumber(fieldId: string, params?: GetFieldAutoNumberQuery): Promise<number>;
    delete(): Promise<boolean>;
    items(params?: GetItemsPl): Promise<Item[]>;
    search(): Promise<Item[]>;
    searchWithCount(options: GetItemsParameters): Promise<{
        items: Item[];
        totalCount: number;
    }>;
    itemsWithCount(params?: GetItemsPl): Promise<{
        items: Item[];
        totalCount: number;
    }>;
    item(id?: string): Promise<Item>;
}
export {};
