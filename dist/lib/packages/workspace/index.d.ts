import { HxbAbstract } from '../../../HxbAbstract';
import Project from '../project';
import Datastore from '../datastore';
import { WorkspaceSettingPl, UserInviteOptions, UserInviteResponse } from '../../types/workspace';
import Language from '../language';
import PasswordPolicy from '../passwordPolicy';
import Redirect from '../redirect';
import WorkspaceFunction from '../workspaceFunction';
import WorkspaceUsage from '../workspaceUsage';
import User from '../user';
import UserSession from '../userSession';
import Group from '../group';
import AppFunction from '../appFunction';
import TemplateCategory from '../templateCategory';
export default class Workspace extends HxbAbstract {
    id: string;
    workspaceId: string;
    wsKey: string;
    name: string;
    appFunctions: AppFunction;
    createdAt: Date;
    updatedAt: Date;
    planName: string;
    planId: string;
    userId: string;
    languages: Language[];
    wsAdmin: string[];
    passwordPolicy: PasswordPolicy;
    redirect: Redirect;
    workspaceFunction: WorkspaceFunction;
    workspaceUsage: WorkspaceUsage;
    workspaceAdminUsers: User[];
    userSession: UserSession;
    _groups: Group[];
    static all(): Promise<Workspace[]>;
    static get(id?: string): Promise<Workspace | undefined>;
    static current(workspaceId?: string): Promise<Workspace | undefined>;
    static _current(workspaceId: string): Promise<boolean>;
    static allWithCurrent(): Promise<{
        workspaces: Workspace[];
        workspace: Workspace;
    }>;
    set(key: string, value: any): Workspace;
    fetch(): Promise<boolean>;
    getPasswordPolicy(): Promise<PasswordPolicy>;
    getFunctionality(): Promise<WorkspaceFunction>;
    getUsage(): Promise<WorkspaceUsage>;
    group(id?: string): Promise<Group>;
    save(): Promise<boolean>;
    create(): Promise<boolean>;
    toJson(): WorkspaceSettingPl;
    archive(): Promise<boolean>;
    project(id?: string): Promise<Project>;
    projects(): Promise<Project[]>;
    projectsAndDatastores(): Promise<{
        projects: Project[];
        datastores: Datastore[];
    }>;
    projectTemplates(): Promise<TemplateCategory[]>;
    invite(emails: string[], domain: string, options?: UserInviteOptions): Promise<UserInviteResponse[]>;
}
