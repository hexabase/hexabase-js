import { HxbAbstract } from '../../../HxbAbstract';
import Datastore from '../datastore';
import { MapType } from '../../util/type';
import { GetHistoryPl, GetItemsPl, GetItemsParameters, ConditionDeleteItems } from '../../types/item';
import ItemHistory from '../itemHistory';
import ItemAction from '../itemAction';
import ItemStatus from '../itemStatus';
import StatusAction from '../statusAction';
import LinkItem from '../linkItem';
import FileObject from '../fileObject';
export default class Item extends HxbAbstract {
    datastore: Datastore;
    id: string;
    statusLabel: string;
    statusId: string;
    title: string;
    createdAt: Date;
    createdBy: string;
    updatedAt: Date;
    updatedBy: string;
    seedItemId: string;
    revNo: number;
    unread: number;
    pinned: boolean;
    fields: MapType;
    actions: ItemAction[];
    statuses: ItemStatus[];
    statusActions: StatusAction[];
    statusOrder: string;
    statusActionOrder: string;
    itemActionOrder: string;
    _status: string | ItemStatus | StatusAction;
    private _updateStatusAction;
    private _existAttachment;
    _linkItems: LinkItem[];
    _unlinkItems: LinkItem[];
    private _detail;
    private ignoreFieldUpdate;
    set(key: string, value: any): Item;
    add(fieldName: string, value: any): Item;
    addAll(fieldName: string, values: any[]): Item;
    setFieldValue(fieldName: string, value: any): Item;
    get<T>(name: string, defaultValue?: T): T | undefined;
    static all(params: GetItemsPl, datastore: Datastore): Promise<{
        items: Item[];
        totalCount: number;
    }>;
    static search(payload: GetItemsParameters, datastore: Datastore): Promise<Item[]>;
    static searchWithCount(payload: GetItemsParameters, datastore: Datastore): Promise<{
        items: Item[];
        totalCount: number;
    }>;
    static createItemId(datastore: Datastore): Promise<string>;
    static delete(conditions: ConditionDeleteItems[], datasstore: Datastore): Promise<boolean>;
    save(comment?: string): Promise<boolean>;
    link(item: Item): Item;
    unlink(item: Item): Item;
    create(): Promise<boolean>;
    execute(actionName: string): Promise<boolean>;
    update(comment?: string): Promise<boolean>;
    toJson(): Promise<MapType>;
    status(status?: string): string;
    fetch(): Promise<boolean>;
    delete(): Promise<boolean>;
    action(actionName: string): Promise<ItemAction>;
    comment(): ItemHistory;
    private _setStatus;
    histories(getHistoryParamQueries?: GetHistoryPl): Promise<any>;
    historiesWithUnread(getHistoryParamQueries?: GetHistoryPl): Promise<{
        unread: number;
        histories: ItemHistory[];
    }>;
    links(linkedDatastore: string | Datastore): Promise<Item[]>;
    file(): FileObject;
}
